<!-- 
    Ant build file for the exist-db extension modules.
    
    Requires a configuration file called local.build.properties or build.properties.
    
    $Id$
-->
<project basedir="." default="jar" name="modules">

    <!--
        Reference to directories
    -->
    <property name="src" value="./src"/>
    <property name="modules.lib" value="./lib"/>
    <property name="classes" value="./classes"/>
    
    <property name="top.dir" value="../.."/>
    <property file="${top.dir}/build.properties"/>

    <property name="build.compiler" value="modern"/>

    <!--
        Get values from properties files. Note that the values in "local.build.properties" 
        are leading to "build.properties".
    -->
    <property file="../local.build.properties"/>
    <property file="../build.properties"/>

    <!-- Modules (in alphabetical order) -->

    <path id="classpath.core">
        <fileset dir="${top.dir}/${lib.core}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.optional}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.endorsed}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.user}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/tools/ant/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/extensions/modules/lib" erroronmissingdir="false">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${top.dir}/exist.jar"/>
        <pathelement path="${top.dir}/exist-optional.jar"/>
        <pathelement path="${top.dir}/start.jar"/>
        <pathelement path="${java.class.path}"/>
    </path>


    <taskdef name="fetch" classname="nl.ow.dilemma.ant.fetch.FetchTask" classpathref="classpath.core" />

    <!--
        existdb-contrib fetch task import used for downloading and extracting jar/class from zip
    -->
    <taskdef name="fetch" classname="nl.ow.dilemma.ant.fetch.FetchTask" classpathref="classpath.core" />

    <!-- 
        Special targets for simpleql module 
    -->
    <uptodate property="parser.uptodate" srcfile="${src}/org/exist/xquery/modules/simpleql/SimpleQLParser.g"
        targetfile="${src}/org/exist/xquery/modules/simpleql/SimpleQLParser.java"/>

    <!--
        ========================================
        Below this line only generic build items
        ========================================
    -->
    <target name="prepare-ivy">
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="classpath.core"/>
        <ivy:retrieve xmlns:ivy="antlib:org.apache.ivy.ant" sync="false"/>
    </target>

    <target name="prepare" depends="prepare-ivy">
        <mkdir dir="${classes}"/>
    </target>

    <target name="compile" depends="prepare" description="Compile extension modules">
        <echo message="---------------------------"/>
        <echo message="Compiling extension modules"/>
        <echo message="---------------------------"/>

        <echo
            message="Compiling with Java ${ant.java.version} from ${build.compiler.source} source to ${build.compiler.target} target, debug ${build.debug}, optimize ${build.optimize}, deprecation ${build.deprecation}"/>

        <javac includeAntRuntime="false" debug="${build.debug}" deprecation="${build.deprecation}" destdir="${classes}" encoding="UTF-8"
            optimize="${build.optimize}" srcdir="${src}" source="${build.compiler.source}"
            target="${build.compiler.target}">
            <classpath>
                <path refid="classpath.core"/>
            </classpath>
        </javac>
    </target>

    <target name="jar" depends="compile">
        <echo message="Creating exist-fixes.jar ..."/>
        <jar basedir="${classes}" jarfile="${top.dir}/${lib.extensions}/exist-fixes.jar">
            <manifest>
                <attribute name="Project-Name" value="${project.name}"/>
                <attribute name="Project-Version" value="${project.version}"/>
                <attribute name="Project-Build" value="${DSTAMP}"/>
                <attribute name="Git-commit" value="${git.commit}"/>
            </manifest>
        </jar>
    </target>
    
    <target name="clean">
        <delete dir="${classes}"/>
        <delete file="${top.dir}/${lib.extensions}/exist-fixes.jar" failonerror="false"/>
    </target>

    <target name="clean-all">
    </target>
</project>
